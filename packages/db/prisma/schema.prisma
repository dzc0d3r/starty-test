generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?   @map("hashed_password")
  image          String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @db.Text @map("refresh_token")
  accessToken       String? @db.Text @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @db.Text @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  hashedRefreshToken String?  @unique @map("hashed_refresh_token")
  userAgent          String?  @map("user_agent")
  ipAddress          String?  @map("ip_address")
  expiresAt          DateTime @map("expires_at")
  createdAt          DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model ManagementCompany {
  id                           String   @id @default(cuid())
  name                         String   @unique
  description                  String?  @db.Text
  logoUrl                      String?

  address                      String?
  totalAssetsUnderManagement Float?   @map("total_assets_under_management")
  fundCount                    Int?     @map("fund_count")
  majorityShareholder          String?  @map("majority_shareholder")

  scpis                        SCPI[]
  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")

  @@map("management_companies")
}

model SCPI {
  id                  String   @id @default(cuid())
  name                String
  type                String   // e.g., Rendement, Fiscale, Diversifiée

  capitalization      Float?   // Capitalisation (M€)
  distributionRate    Float?   @map("distribution_rate") // Taux de Distribution (%)

  subscriptionMinimum Int?     @map("subscription_minimum") // Minimum souscription (nombre de parts)
  partPrice           Float?   @map("part_price")           // Prix de la part (€)
  associateCount      Int?     @map("associate_count")      // Nombre d'associés
  partCount           Int?     @map("part_count")           // Nombre de parts
  buildingCount       Int?     @map("building_count")       // Nombre d'immeubles
  tenantCount         Int?     @map("tenant_count")         // Nombre de locataires
  occupancyRate       Float?   @map("occupancy_rate")       // Taux d’occupation financier (%)

  managementCompany   ManagementCompany @relation(fields: [managementCompanyId], references: [id], onDelete: Cascade)
  managementCompanyId String            @map("management_company_id")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("scpis")
}
