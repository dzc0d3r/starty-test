openapi: 3.0.0
info:
  title: SCPI Management API
  version: "1.0.0"
  description: API for managing SCPIs (Sociétés Civiles de Placement Immobilier) and their management companies.
  contact:
    name: Walid

servers:
  - url: /api/v1
    description: Development Server

tags:
  - name: Auth
    description: Authentication operations
  - name: Companies
    description: Operations related to management companies

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate a user
      description: Logs in a user with an email and password. On success, it returns a short-lived access token in the JSON body and sets two cookies; a session 'accessToken' and a long-lived, secure 'refreshToken'.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: Unauthorized - Invalid credentials provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /companies:
    get:
      tags:
        - Companies
      summary: Retrieve a list of all management companies
      description: Fetches a JSON array of all management companies from the database. This is a public endpoint.
      responses:
        "200":
          description: A list of companies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyResponse'
        "500":
          description: Internal Server Error

    post:
      tags:
        - Companies
      summary: Create a new management company (Admin Only)
      description: Adds a new management company to the database. Requires authentication and an Admin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyInput'
      responses:
        "201":
          description: Company created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyResponse'
        "400":
          description: Bad Request - Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "401":
          description: Unauthorized - No token or invalid token provided.
        "403":
          description: Forbidden - User does not have Admin privileges.
        "409":
          description: Conflict - A company with this name already exists.
        "500":
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter your JWT in the format: Bearer <token>"

  schemas:
    # --- Request Schemas ---
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'admin1@test.com'
        password:
          type: string
          format: password
          example: 'Password123!'

    CreateCompanyInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'New Company Name'
        description:
          type: string
          example: 'A brief description of the company.'
        logoUrl:
          type: string
          format: uri
          example: 'https://example.com/logo.png'

    # --- Response Schemas ---
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        user:
          $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
          nullable: true
        role:
          type: string
          enum: [USER, ADMIN]

    CompanyResponse:
      type: object
      properties:
        id:
          type: string
          example: 'clw8d9j0k0000z89a7b6c5d4e'
        name:
          type: string
          example: 'Corum AM'
        description:
          type: string
          nullable: true
        logoUrl:
          type: string
          format: uri
          nullable: true
        # ... and all the other company fields
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # --- Error Schemas ---
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: 'error'
        message:
          type: string
          example: 'An unexpected error occurred.'

    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: 'error'
        message:
          type: object
          properties:
            message:
              type: string
              example: 'Invalid request data'
            errors:
              type: object
              properties:
                name:
                  type: array
                  items:
                    type: string
                  example: ["String must contain at least 3 character(s)"]
